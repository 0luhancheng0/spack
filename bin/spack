#!/usr/bin/env python
import sys
if not sys.version_info[:2] >= (2,7):
    sys.exit("Spack requires Python 2.7.  Version was %s." % sys.version_info)

import os
import argparse

# Find spack's location and its prefix.
SPACK_FILE = os.path.realpath(os.path.expanduser(__file__))
os.environ["SPACK_FILE"] = SPACK_FILE
SPACK_PREFIX = os.path.dirname(os.path.dirname(SPACK_FILE))

# Allow spack libs to be imported in our scripts
SPACK_LIB_PATH = os.path.join(SPACK_PREFIX, "lib", "spack")
sys.path.insert(0, SPACK_LIB_PATH)

# clean up the scope and start using spack package instead.
del SPACK_FILE, SPACK_PREFIX, SPACK_LIB_PATH
import spack
import spack.tty as tty

# Command parsing
parser = argparse.ArgumentParser(
    description='Spack: the Supercomputing PACKage Manager.')
parser.add_argument('-V', '--version', action='version',
                    version="%s" % spack.spack_version)
parser.add_argument('-v', '--verbose', action='store_true', dest='verbose',
                    help="print additional output during builds")
parser.add_argument('-d', '--debug', action='store_true', dest='debug',
                    help="write out debug logs during compile")

# each command module implements a parser() function, to which we pass its
# subparser for setup.
subparsers = parser.add_subparsers(
    title="commands", metavar='<command>', dest="command")

import spack.cmd
for cmd in spack.cmd.commands:
    module = spack.cmd.get_module(cmd)
    subparser = subparsers.add_parser(cmd, help=module.description)
    module.setup_parser(subparser)
args = parser.parse_args()

# Set up environment based on args.
spack.verbose = args.verbose
spack.debug = args.debug

# Try to load the particular command asked for and run it
command = spack.cmd.get_command(args.command)
try:
    command(parser, args)
except KeyboardInterrupt:
    tty.die("Got a keyboard interrupt from the user.")
